package ru.otus.homework.homework6

/*
Command в Kotlin - это поведенческий шаблон проектирования, который инкапсулирует запроса в виде объекта,
делая возможной параметризацию клиентских объектов с другими запросами, организацию очереди или регистрацию запросов,
а также поддержку отмены операций.

Этот шаблон позволяет создавать общий интерфейс для команд и позволяет клиентам работать с командами
без необходимости знать о конечной реализации команды.
Команды могут быть объектами, которые содержат в себе все необходимые данные для выполнения определенной операции.

Command также позволяет реализовать отмену и повторение операций, делая его полезным для различных функций,
таких как история действий, управление транзакциями и другие.

Команды могут использоваться для реализации различных операций, которые можно запускать и управлять из централизованного места,
обеспечивая гибкость и расширяемость приложений.
*/

// Интерфейс команды - объявление интерфейса `Command` с методом `execute()`, который должны реализовать конкретные команды.
interface Command {
    fun execute()
}

// Конкретная реализация команды - открыть дверь.
// Создание класса `OpenDoorCommand`, который реализует интерфейс `Command` и выполняет операцию открытия двери.
class OpenDoorCommand : Command {
    override fun execute() {
        println("Дверь открыта")
    }
}

// Конкретная реализация команды - закрыть дверь
// Создание класса `CloseDoorCommand`, который реализует интерфейс `Command` и выполняет операцию закрытия двери.
class CloseDoorCommand : Command {
    override fun execute() {
        println("Дверь закрыта")
    }
}

// Инвокер - отправитель команд
// Создание класса `RemoteControl`, который хранит текущую команду и имеет методы для установки команды и выполнения операции.
class RemoteControl {
    private var command: Command? = null

    // метод класса `RemoteControl` для установки команды, которую нужно выполнить.
    fun setCommand(command: Command) {
        this.command = command
    }
     // метод класса `RemoteControl` для выполнения операции, вызывая `execute()` текущей команды, если она установлена.
    fun pressButton() {
        command?.execute()
    }
}

fun main() {
    val remoteControl = RemoteControl()

    val openDoorCommand = OpenDoorCommand()
    val closeDoorCommand = CloseDoorCommand()

    remoteControl.setCommand(openDoorCommand)
    remoteControl.pressButton() // Вывод: Дверь открыта

    remoteControl.setCommand(closeDoorCommand)
    remoteControl.pressButton() // Вывод: Дверь закрыта
}